version: "3.8"

# NOTE!! All environment sections are in "dict" format,
# and items are in alphabetical order!

# common service settings for workers
x-common-worker-service: &common-worker-service
  build:
    context: ..
    dockerfile: docker/Dockerfile

  #Pushing to a local registry for now, while in dev loop.
  image: localhost:5000/common_worker

  networks:
    - story-indexer
  restart: "on-failure"
  volumes:
    - worker_data:/app/data/

# common environment settings for all containers
# Log everything in GMT!!!
x-common-environment: &common-environment
    TZ: "GMT"

x-common-worker-environment: &common-worker-environment
    <<: *common-environment
    # RUN and ARGS should be set per-worker

    LOG_LEVEL: "info"
    RABBITMQ_URL: amqp://rabbitmq:5672/?connection_attempts=10&retry_delay=5
    # STATSD_REALM *MUST* be available in evironment when running
    # "docker stack deploy".
    # can ignore multiple complaints from "docker compose build"
    STATSD_REALM: "${STATSD_REALM}"
    # depends on proxy running on tarbell:
    STATSD_URL: statsd://stats.tarbell.mediacloud.org
    STORY_FACTORY: "BaseStory"

services:
  swarm-cronjob:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      <<: *common-environment
      LOG_LEVEL: "info"
      LOG_JSON: "false"
    deploy:
      placement:
        constraints:
          - node.role == manager

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      <<: *common-environment
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - story-indexer
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 2

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      <<: *common-environment
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      discovery.type: "single-node"
      node.name: "elasticsearch"
      xpack.security.enabled: "false"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - story-indexer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 2

  pipeline_configurator:
    <<: *common-worker-service
    environment:
      <<: *common-worker-environment
      RUN: configure-pipeline
      ARGS: "configure"

  fetch_worker:
    <<: *common-worker-service
    environment:
      <<: *common-worker-environment
      RUN: fetcher
      ARGS: "--log-level=info --yesterday --batch-index={{.Task.Slot}} --sample-size=2000"
      FETCHER_NUM_BATCHES: &NUM_BATCHES 10
    deploy:
      labels:
         swarm.cronjob.enable: "true"
         swarm.cronjob.schedule: "*/10 * * * *"
         swarm.cronjob.replicas: *NUM_BATCHES
      replicas: *NUM_BATCHES

  parser_worker:
    <<: *common-worker-service
    environment:
      <<: *common-worker-environment
      RUN: parser

  importer_worker:
    <<: *common-worker-service
    environment:
      <<: *common-worker-environment
      RUN: importer
      ELASTICSEARCH_HOST: http://elasticsearch:9200/
      ELASTICSEARCH_INDEX_NAME: mediacloud_search_text
      ELASTICSEARCH_SHARDS: 1
      ELASTICSEARCH_REPLICAS: 0



volumes:
  elasticsearch_data:
  #Neccesary for diskstory, ideally not used
  worker_data:

networks:
  story-indexer:
    driver: overlay
